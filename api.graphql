### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

type Course {
  description: String
  id: Int
  title: String
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input CourseCreateInput {
  createdAt: DateTime
  description: String!
  title: String!
  users: UserCreateManyWithoutCoursesInput
}

input CourseCreateManyWithoutUsersInput {
  connect: [CourseWhereUniqueInput!]
  create: [CourseCreateWithoutUsersInput!]
}

input CourseCreateWithoutUsersInput {
  createdAt: DateTime
  description: String!
  title: String!
}

input CourseFilter {
  every: CourseWhereInput
  none: CourseWhereInput
  some: CourseWhereInput
}

input CourseScalarWhereInput {
  AND: [CourseScalarWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: IntFilter
  NOT: [CourseScalarWhereInput!]
  OR: [CourseScalarWhereInput!]
  title: StringFilter
  users: UserFilter
}

input CourseUpdateManyDataInput {
  createdAt: DateTime
  description: String
  title: String
}

input CourseUpdateManyWithoutUsersInput {
  connect: [CourseWhereUniqueInput!]
  create: [CourseCreateWithoutUsersInput!]
  delete: [CourseWhereUniqueInput!]
  deleteMany: [CourseScalarWhereInput!]
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutUsersInput!]
}

input CourseUpdateManyWithWhereNestedInput {
  data: CourseUpdateManyDataInput!
  where: CourseScalarWhereInput!
}

input CourseUpdateWithoutUsersDataInput {
  createdAt: DateTime
  description: String
  title: String
}

input CourseUpdateWithWhereUniqueWithoutUsersInput {
  data: CourseUpdateWithoutUsersDataInput!
  where: CourseWhereUniqueInput!
}

input CourseUpsertWithWhereUniqueWithoutUsersInput {
  create: CourseCreateWithoutUsersInput!
  update: CourseUpdateWithoutUsersDataInput!
  where: CourseWhereUniqueInput!
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: IntFilter
  NOT: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  title: StringFilter
  users: UserFilter
}

input CourseWhereUniqueInput {
  id: Int
  title: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  createOneCourse(data: CourseCreateInput!): Course!
  createOneUser(data: UserCreateInput!): User!
  deleteOneUser(where: UserWhereUniqueInput!): User
  enroll(id: Int!): Course
  login(email: String!, password: String!): AuthPayload
  signup(data: UserCreateInput): AuthPayload
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

type Query {
  course(where: CourseWhereUniqueInput!): Course
  courses(after: CourseWhereUniqueInput, before: CourseWhereUniqueInput, first: Int, last: Int): [Course!]!
  instructor(id: Int!): [User!]!
  student(id: Int!): [User!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  courses(after: CourseWhereUniqueInput, before: CourseWhereUniqueInput, first: Int, last: Int): [Course!]!
  email: String
  id: Int
  name: String
  password: String
  role: String
}

input UserCreateInput {
  courses: CourseCreateManyWithoutUsersInput
  createdAt: DateTime
  email: String!
  name: String!
  password: String!
  role: UserRole
}

input UserCreateManyWithoutCoursesInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutCoursesInput!]
}

input UserCreateWithoutCoursesInput {
  createdAt: DateTime
  email: String!
  name: String!
  password: String!
  role: UserRole
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserInput {
  email: String!
  name: String!
  password: String!
  role: String
}

enum UserRole {
  Admin
  Instructor
  Student
}

input UserUpdateInput {
  courses: CourseUpdateManyWithoutUsersInput
  createdAt: DateTime
  email: String
  name: String
  password: String
  role: UserRole
}

input UserWhereInput {
  AND: [UserWhereInput!]
  courses: CourseFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  role: UserRole
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
