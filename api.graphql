### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Course {
  description: String
  id: Int
  title: String
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

input CourseCreateInput {
  createdAt: DateTime
  description: String!
  title: String!
  users: UserCreateManyWithoutCoursesInput
}

input CourseCreateManyWithoutUsersInput {
  connect: [CourseWhereUniqueInput!]
  create: [CourseCreateWithoutUsersInput!]
}

input CourseCreateWithoutUsersInput {
  createdAt: DateTime
  description: String!
  title: String!
}

input CourseWhereUniqueInput {
  id: Int
  title: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  createOneCourse(data: CourseCreateInput!): Course!
  createOneUser(data: UserCreateInput!): User!
  deleteOneUser(where: UserWhereUniqueInput!): User
}

type Query {
  course(where: CourseWhereUniqueInput!): Course
  courses(after: CourseWhereUniqueInput, before: CourseWhereUniqueInput, first: Int, last: Int): [Course!]!
  coursesByInstructor(id: Int!): [User!]!
  coursesByStudent(id: Int!): [User!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

type User {
  courses(after: CourseWhereUniqueInput, before: CourseWhereUniqueInput, first: Int, last: Int): [Course!]!
  email: String
  id: Int
  name: String
  password: String
  role: String
}

input UserCreateInput {
  courses: CourseCreateManyWithoutUsersInput
  createdAt: DateTime
  email: String!
  name: String!
  password: String!
  role: UserRole
}

input UserCreateManyWithoutCoursesInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutCoursesInput!]
}

input UserCreateWithoutCoursesInput {
  createdAt: DateTime
  email: String!
  name: String!
  password: String!
  role: UserRole
}

enum UserRole {
  Admin
  Instructor
  Student
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
